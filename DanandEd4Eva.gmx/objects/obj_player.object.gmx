<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_blank</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ORION_NO_STARS=19;
ORION_NO_LINES=21;
AQUILA_NO_STARS=14;
AQUILA_NO_LINES=14;//14
TAURUS_NO_STARS=21;
TAURUS_NO_LINES=22;
WIDTH=200;
LENGTH=200;
X_STEP=16;
Y_STEP=16;
LINE_WIDTH=10;

//used for transitioning states
currFrame=0;
enum state{
  ORION_STATE1,
  ORION_STATE1to2,
  ORION_STATE2to1,
  ORION_STATE2,
  ORION_STATE2toATTACK,
  ORION_STATE_ATTACK,
  AQUILA_STATE1,
  AQUILA_STATE1to2,
  AQUILA_STATE2,
  AQUILA_STATE2to1,
  AQUILA_STATE_DIVE,
  TAURUS_STATE1,
  TAURUS_STATE2,
  TAURUS_STATE1to2,
  TAURUS_STATE2to1,
  TAURUS_CHARGE,
  ORION_TO_AQUILA,
  AQUILA_TO_TAURUS,
  TAURUS_TO_ORION
};
curr_state=state.ORION_STATE1to2;
grd_aqu_s1=ds_grid_create(2,AQUILA_NO_STARS);
//left wing
ds_grid_set(grd_aqu_s1,0,0,3);
ds_grid_set(grd_aqu_s1,1,0,2);
ds_grid_set(grd_aqu_s1,0,1,7);
ds_grid_set(grd_aqu_s1,1,1,2);
ds_grid_set(grd_aqu_s1,0,2,6);
ds_grid_set(grd_aqu_s1,1,2,7);
ds_grid_set(grd_aqu_s1,0,3,10);
ds_grid_set(grd_aqu_s1,1,3,5);
//tail
ds_grid_set(grd_aqu_s1,0,4,4);
ds_grid_set(grd_aqu_s1,1,4,11);
ds_grid_set(grd_aqu_s1,0,5,0);
ds_grid_set(grd_aqu_s1,1,5,12);
ds_grid_set(grd_aqu_s1,0,6,5);
ds_grid_set(grd_aqu_s1,1,6,17);
ds_grid_set(grd_aqu_s1,0,7,6);
ds_grid_set(grd_aqu_s1,1,7,14);

//right wing
ds_grid_set(grd_aqu_s1,0,8,10);
ds_grid_set(grd_aqu_s1,1,8,12);
ds_grid_set(grd_aqu_s1,0,9,16);
ds_grid_set(grd_aqu_s1,1,9,13);
ds_grid_set(grd_aqu_s1,0,10,15);//15);
ds_grid_set(grd_aqu_s1,1,10,17);//17
ds_grid_set(grd_aqu_s1,0,11,12);
ds_grid_set(grd_aqu_s1,1,11,8);
//beak
ds_grid_set(grd_aqu_s1,0,12,13);
ds_grid_set(grd_aqu_s1,1,12,5);
ds_grid_set(grd_aqu_s1,0,13,16);
ds_grid_set(grd_aqu_s1,1,13,6);


grd_tau_s1=ds_grid_create(2,TAURUS_NO_STARS);
//horns
ds_grid_set(grd_tau_s1,0,0,7);
ds_grid_set(grd_tau_s1,1,0,2);
ds_grid_set(grd_tau_s1,0,1,1);
ds_grid_set(grd_tau_s1,1,1,6);
//head
ds_grid_set(grd_tau_s1,0,2,10);
ds_grid_set(grd_tau_s1,1,2,9);
ds_grid_set(grd_tau_s1,0,3,7);
ds_grid_set(grd_tau_s1,1,3,11);
ds_grid_set(grd_tau_s1,0,4,12);
ds_grid_set(grd_tau_s1,1,4,13);
ds_grid_set(grd_tau_s1,0,5,11);
ds_grid_set(grd_tau_s1,1,5,14);
//body(top)
ds_grid_set(grd_tau_s1,0,6,19);
ds_grid_set(grd_tau_s1,1,6,6);
ds_grid_set(grd_tau_s1,0,7,34);
ds_grid_set(grd_tau_s1,1,7,8);
ds_grid_set(grd_tau_s1,0,8,37);
ds_grid_set(grd_tau_s1,1,8,13);
//body(lower)
ds_grid_set(grd_tau_s1,0,9,18);
ds_grid_set(grd_tau_s1,1,9,16);
ds_grid_set(grd_tau_s1,0,10,22);
ds_grid_set(grd_tau_s1,1,10,17);
ds_grid_set(grd_tau_s1,0,11,32);
ds_grid_set(grd_tau_s1,1,11,17);
//tail
ds_grid_set(grd_tau_s1,0,12,40);
ds_grid_set(grd_tau_s1,1,12,11);
//front legs
ds_grid_set(grd_tau_s1,0,13,12);
ds_grid_set(grd_tau_s1,1,13,17);
ds_grid_set(grd_tau_s1,0,14,14);
ds_grid_set(grd_tau_s1,1,14,24);
ds_grid_set(grd_tau_s1,0,15,16);
ds_grid_set(grd_tau_s1,1,15,19);
ds_grid_set(grd_tau_s1,0,16,18);
ds_grid_set(grd_tau_s1,1,16,24);
//rear legs
ds_grid_set(grd_tau_s1,0,17,34);
ds_grid_set(grd_tau_s1,1,17,21);
ds_grid_set(grd_tau_s1,0,18,32);
ds_grid_set(grd_tau_s1,1,18,24);
ds_grid_set(grd_tau_s1,0,19,39);
ds_grid_set(grd_tau_s1,1,19,19);
ds_grid_set(grd_tau_s1,0,20,37);
ds_grid_set(grd_tau_s1,1,20,24);

grd_tau_s2=ds_grid_create(2,TAURUS_NO_STARS);
//horns
ds_grid_set(grd_tau_s2,0,0,7);
ds_grid_set(grd_tau_s2,1,0,2);
ds_grid_set(grd_tau_s2,0,1,1);
ds_grid_set(grd_tau_s2,1,1,6);
//head
ds_grid_set(grd_tau_s2,0,2,10);
ds_grid_set(grd_tau_s2,1,2,9);
ds_grid_set(grd_tau_s2,0,3,7);
ds_grid_set(grd_tau_s2,1,3,11);
ds_grid_set(grd_tau_s2,0,4,12);
ds_grid_set(grd_tau_s2,1,4,13);
ds_grid_set(grd_tau_s2,0,5,11);
ds_grid_set(grd_tau_s2,1,5,14);
//body(top)
ds_grid_set(grd_tau_s2,0,6,19);
ds_grid_set(grd_tau_s2,1,6,6);
ds_grid_set(grd_tau_s2,0,7,34);
ds_grid_set(grd_tau_s2,1,7,8);
ds_grid_set(grd_tau_s2,0,8,37);
ds_grid_set(grd_tau_s2,1,8,13);
//body(lower)
ds_grid_set(grd_tau_s2,0,9,18);
ds_grid_set(grd_tau_s2,1,9,16);
ds_grid_set(grd_tau_s2,0,10,22);
ds_grid_set(grd_tau_s2,1,10,17);
ds_grid_set(grd_tau_s2,0,11,32);
ds_grid_set(grd_tau_s2,1,11,17);
//tail
ds_grid_set(grd_tau_s2,0,12,40);
ds_grid_set(grd_tau_s2,1,12,11);
//front legs
ds_grid_set(grd_tau_s2,0,13,15);
ds_grid_set(grd_tau_s2,1,13,20);
ds_grid_set(grd_tau_s2,0,14,18);
ds_grid_set(grd_tau_s2,1,14,24);

ds_grid_set(grd_tau_s2,0,15,16);
ds_grid_set(grd_tau_s2,1,15,20);
ds_grid_set(grd_tau_s2,0,16,14);
ds_grid_set(grd_tau_s2,1,16,24);
//rear legs
ds_grid_set(grd_tau_s2,0,17,36);
ds_grid_set(grd_tau_s2,1,17,20);
ds_grid_set(grd_tau_s2,0,18,38);
ds_grid_set(grd_tau_s2,1,18,24);

ds_grid_set(grd_tau_s2,0,19,37);
ds_grid_set(grd_tau_s2,1,19,19);
ds_grid_set(grd_tau_s2,0,20,35);
ds_grid_set(grd_tau_s2,1,20,24);

grd_tau_lines=ds_grid_create(2,TAURUS_NO_LINES);
//horns
ds_grid_set(grd_tau_lines,0,0,0);
ds_grid_set(grd_tau_lines,1,0,2);
ds_grid_set(grd_tau_lines,0,1,1);
ds_grid_set(grd_tau_lines,1,1,3);
//head
ds_grid_set(grd_tau_lines,0,2,2);
ds_grid_set(grd_tau_lines,1,2,3);
ds_grid_set(grd_tau_lines,0,3,3);
ds_grid_set(grd_tau_lines,1,3,5);
ds_grid_set(grd_tau_lines,0,4,5);
ds_grid_set(grd_tau_lines,1,4,4);
ds_grid_set(grd_tau_lines,0,5,4);
ds_grid_set(grd_tau_lines,1,5,2);
//top body
ds_grid_set(grd_tau_lines,0,6,2);
ds_grid_set(grd_tau_lines,1,6,6);
ds_grid_set(grd_tau_lines,0,7,6);
ds_grid_set(grd_tau_lines,1,7,7);
ds_grid_set(grd_tau_lines,0,8,7);
ds_grid_set(grd_tau_lines,1,8,8);
//lower body
ds_grid_set(grd_tau_lines,0,9,8);
ds_grid_set(grd_tau_lines,1,9,11);
ds_grid_set(grd_tau_lines,0,10,10);
ds_grid_set(grd_tau_lines,1,10,11);
ds_grid_set(grd_tau_lines,0,11,9);
ds_grid_set(grd_tau_lines,1,11,10);
ds_grid_set(grd_tau_lines,0,12,4);
ds_grid_set(grd_tau_lines,1,12,9);
//tail
ds_grid_set(grd_tau_lines,0,13,7);
ds_grid_set(grd_tau_lines,1,13,12);
//front legs
ds_grid_set(grd_tau_lines,0,14,9);
ds_grid_set(grd_tau_lines,1,14,13);
ds_grid_set(grd_tau_lines,0,15,13);
ds_grid_set(grd_tau_lines,1,15,14);
ds_grid_set(grd_tau_lines,0,16,10);
ds_grid_set(grd_tau_lines,1,16,15);
ds_grid_set(grd_tau_lines,0,17,15);
ds_grid_set(grd_tau_lines,1,17,16);
//rear legs
ds_grid_set(grd_tau_lines,0,18,11);
ds_grid_set(grd_tau_lines,1,18,17);
ds_grid_set(grd_tau_lines,0,19,17);
ds_grid_set(grd_tau_lines,1,19,18);
ds_grid_set(grd_tau_lines,0,20,8);
ds_grid_set(grd_tau_lines,1,20,19);
ds_grid_set(grd_tau_lines,0,21,19);
ds_grid_set(grd_tau_lines,1,21,20);

grd_aqu_s2=ds_grid_create(2,AQUILA_NO_STARS);
//left wing
ds_grid_set(grd_aqu_s2,0,0,2);
ds_grid_set(grd_aqu_s2,1,0,3);
ds_grid_set(grd_aqu_s2,0,1,6);
ds_grid_set(grd_aqu_s2,1,1,3);
ds_grid_set(grd_aqu_s2,0,2,6);
ds_grid_set(grd_aqu_s2,1,2,7);
ds_grid_set(grd_aqu_s2,0,3,10);
ds_grid_set(grd_aqu_s2,1,3,5);
//tail
ds_grid_set(grd_aqu_s2,0,4,4);
ds_grid_set(grd_aqu_s2,1,4,11);
ds_grid_set(grd_aqu_s2,0,5,0);
ds_grid_set(grd_aqu_s2,1,5,12);
ds_grid_set(grd_aqu_s2,0,6,5);
ds_grid_set(grd_aqu_s2,1,6,17);
ds_grid_set(grd_aqu_s2,0,7,6);
ds_grid_set(grd_aqu_s2,1,7,14);

//right wing
ds_grid_set(grd_aqu_s2,0,8,10);
ds_grid_set(grd_aqu_s2,1,8,12);
ds_grid_set(grd_aqu_s2,0,9,14);
ds_grid_set(grd_aqu_s2,1,9,14);
ds_grid_set(grd_aqu_s2,0,10,13);//15);
ds_grid_set(grd_aqu_s2,1,10,18);//17
ds_grid_set(grd_aqu_s2,0,11,12);
ds_grid_set(grd_aqu_s2,1,11,8);
//beak
ds_grid_set(grd_aqu_s2,0,12,13);
ds_grid_set(grd_aqu_s2,1,12,5);
ds_grid_set(grd_aqu_s2,0,13,16);
ds_grid_set(grd_aqu_s2,1,13,6);

grd_aqu_lines=ds_grid_create(2,AQUILA_NO_LINES);
//left wing
ds_grid_set(grd_aqu_lines,0,0,3);
ds_grid_set(grd_aqu_lines,1,0,1);
ds_grid_set(grd_aqu_lines,0,1,0);
ds_grid_set(grd_aqu_lines,1,1,1);
ds_grid_set(grd_aqu_lines,0,2,0);
ds_grid_set(grd_aqu_lines,1,2,2);
//tail
ds_grid_set(grd_aqu_lines,0,3,2);
ds_grid_set(grd_aqu_lines,1,3,4);
ds_grid_set(grd_aqu_lines,0,4,4);
ds_grid_set(grd_aqu_lines,1,4,5);
ds_grid_set(grd_aqu_lines,0,5,5);
ds_grid_set(grd_aqu_lines,1,5,6);
ds_grid_set(grd_aqu_lines,0,6,6);
ds_grid_set(grd_aqu_lines,1,6,7);
//right wing
ds_grid_set(grd_aqu_lines,0,7,7);
ds_grid_set(grd_aqu_lines,1,7,8);
ds_grid_set(grd_aqu_lines,0,8,8);
ds_grid_set(grd_aqu_lines,1,8,10);
ds_grid_set(grd_aqu_lines,0,9,10);
ds_grid_set(grd_aqu_lines,1,9,9);
ds_grid_set(grd_aqu_lines,0,10,9);
ds_grid_set(grd_aqu_lines,1,10,11);
//head
ds_grid_set(grd_aqu_lines,0,11,11);
ds_grid_set(grd_aqu_lines,1,11,13);
ds_grid_set(grd_aqu_lines,0,12,13);
ds_grid_set(grd_aqu_lines,1,12,12);
ds_grid_set(grd_aqu_lines,0,13,12);
ds_grid_set(grd_aqu_lines,1,13,3);

//shape1, state 1
grd_shape1=ds_grid_create(2,ORION_NO_STARS);
//first col is x co-ord, second is y
//head
ds_grid_set(grd_shape1,0,0,7);
ds_grid_set(grd_shape1,1,0,0);
ds_grid_set(grd_shape1,0,1,5);
ds_grid_set(grd_shape1,1,1,1);
ds_grid_set(grd_shape1,0,2,8);
ds_grid_set(grd_shape1,1,2,2);
ds_grid_set(grd_shape1,0,3,6);
ds_grid_set(grd_shape1,1,3,3);
//shoulders
ds_grid_set(grd_shape1,0,4,4);
ds_grid_set(grd_shape1,1,4,4);
ds_grid_set(grd_shape1,0,5,10);
ds_grid_set(grd_shape1,1,5,4);
//belt
ds_grid_set(grd_shape1,0,6,6);
ds_grid_set(grd_shape1,1,6,12);
ds_grid_set(grd_shape1,0,7,7);
ds_grid_set(grd_shape1,1,7,11);
ds_grid_set(grd_shape1,0,8,8);
ds_grid_set(grd_shape1,1,8,10);
//legs
ds_grid_set(grd_shape1,0,9,4);
ds_grid_set(grd_shape1,1,9,19);
ds_grid_set(grd_shape1,0,10,11);
ds_grid_set(grd_shape1,1,10,18);
//left arm
ds_grid_set(grd_shape1,0,11,2);
ds_grid_set(grd_shape1,1,11,9);
ds_grid_set(grd_shape1,0,12,3);
ds_grid_set(grd_shape1,1,12,12);
//right arm and sword
ds_grid_set(grd_shape1,0,13,11);
ds_grid_set(grd_shape1,1,13,9);
ds_grid_set(grd_shape1,0,14,13);
ds_grid_set(grd_shape1,1,14,12);
ds_grid_set(grd_shape1,0,15,12);
ds_grid_set(grd_shape1,1,15,11);
ds_grid_set(grd_shape1,0,16,17);
ds_grid_set(grd_shape1,1,16,15);
//sword handle
ds_grid_set(grd_shape1,0,17,14);
ds_grid_set(grd_shape1,1,17,11);
ds_grid_set(grd_shape1,0,18,12);
ds_grid_set(grd_shape1,1,18,13);

//shape1, state 2
grd_shape1_state2=ds_grid_create(2,ORION_NO_STARS);
//head
ds_grid_set(grd_shape1_state2,0,0,7);
ds_grid_set(grd_shape1_state2,1,0,1);
ds_grid_set(grd_shape1_state2,0,1,5);
ds_grid_set(grd_shape1_state2,1,1,2);
ds_grid_set(grd_shape1_state2,0,2,8);
ds_grid_set(grd_shape1_state2,1,2,3);
ds_grid_set(grd_shape1_state2,0,3,6);
ds_grid_set(grd_shape1_state2,1,3,4);
//shoulders
ds_grid_set(grd_shape1_state2,0,4,4);
ds_grid_set(grd_shape1_state2,1,4,4);
ds_grid_set(grd_shape1_state2,0,5,10);
ds_grid_set(grd_shape1_state2,1,5,4);
//belt
ds_grid_set(grd_shape1_state2,0,6,5);
ds_grid_set(grd_shape1_state2,1,6,12);
ds_grid_set(grd_shape1_state2,0,7,6);
ds_grid_set(grd_shape1_state2,1,7,11);
ds_grid_set(grd_shape1_state2,0,8,7);
ds_grid_set(grd_shape1_state2,1,8,10);
//legs
ds_grid_set(grd_shape1_state2,0,9,5);
ds_grid_set(grd_shape1_state2,1,9,19);
ds_grid_set(grd_shape1_state2,0,10,13);
ds_grid_set(grd_shape1_state2,1,10,18);
//left arm
ds_grid_set(grd_shape1_state2,0,11,2);
ds_grid_set(grd_shape1_state2,1,11,7);
ds_grid_set(grd_shape1_state2,0,12,3);
ds_grid_set(grd_shape1_state2,1,12,11);
//right arm+sword
ds_grid_set(grd_shape1_state2,0,13,11);
ds_grid_set(grd_shape1_state2,1,13,9);
ds_grid_set(grd_shape1_state2,0,14,13);
ds_grid_set(grd_shape1_state2,1,14,12);
ds_grid_set(grd_shape1_state2,0,15,12);
ds_grid_set(grd_shape1_state2,1,15,11);
ds_grid_set(grd_shape1_state2,0,16,17);
ds_grid_set(grd_shape1_state2,1,16,15);
//sword handle
ds_grid_set(grd_shape1_state2,0,17,14);
ds_grid_set(grd_shape1_state2,1,17,11);
ds_grid_set(grd_shape1_state2,0,18,12);
ds_grid_set(grd_shape1_state2,1,18,13);

grd_shape1_state3=ds_grid_create(2,ORION_NO_STARS);
//head
ds_grid_set(grd_shape1_state3,0,0,7);
ds_grid_set(grd_shape1_state3,1,0,1);
ds_grid_set(grd_shape1_state3,0,1,5);
ds_grid_set(grd_shape1_state3,1,1,2);
ds_grid_set(grd_shape1_state3,0,2,8);
ds_grid_set(grd_shape1_state3,1,2,3);
ds_grid_set(grd_shape1_state3,0,3,6);
ds_grid_set(grd_shape1_state3,1,3,4);
//shoulders
ds_grid_set(grd_shape1_state3,0,4,4);
ds_grid_set(grd_shape1_state3,1,4,4);
ds_grid_set(grd_shape1_state3,0,5,10);
ds_grid_set(grd_shape1_state3,1,5,4);
//belt
ds_grid_set(grd_shape1_state3,0,6,5);
ds_grid_set(grd_shape1_state3,1,6,12);
ds_grid_set(grd_shape1_state3,0,7,6);
ds_grid_set(grd_shape1_state3,1,7,11);
ds_grid_set(grd_shape1_state3,0,8,7);
ds_grid_set(grd_shape1_state3,1,8,10);
//legs
ds_grid_set(grd_shape1_state3,0,9,5);
ds_grid_set(grd_shape1_state3,1,9,19);
ds_grid_set(grd_shape1_state3,0,10,13);
ds_grid_set(grd_shape1_state3,1,10,18);
//left arm
ds_grid_set(grd_shape1_state3,0,11,2);
ds_grid_set(grd_shape1_state3,1,11,7);
ds_grid_set(grd_shape1_state3,0,12,3);
ds_grid_set(grd_shape1_state3,1,12,11);
//right arm+sword
ds_grid_set(grd_shape1_state3,0,13,11);
ds_grid_set(grd_shape1_state3,1,13,9);

ds_grid_set(grd_shape1_state3,0,14,14);
ds_grid_set(grd_shape1_state3,1,14,10);
ds_grid_set(grd_shape1_state3,0,15,12);
ds_grid_set(grd_shape1_state3,1,15,10);
ds_grid_set(grd_shape1_state3,0,16,19);
ds_grid_set(grd_shape1_state3,1,16,10);
//sword handle
ds_grid_set(grd_shape1_state3,0,17,14);
ds_grid_set(grd_shape1_state3,1,17,9);
ds_grid_set(grd_shape1_state3,0,18,14);
ds_grid_set(grd_shape1_state3,1,18,11);


grd_shape1_lines=ds_grid_create(2,ORION_NO_LINES);
//each col represents a row in the grd_shape grid
//head
ds_grid_set(grd_shape1_lines,0,0,0);//so we want the first 
ds_grid_set(grd_shape1_lines,1,0,1);//and second stars to be linked by a line
ds_grid_set(grd_shape1_lines,0,1,0);
ds_grid_set(grd_shape1_lines,1,1,2);
ds_grid_set(grd_shape1_lines,0,2,1);
ds_grid_set(grd_shape1_lines,1,2,3);
ds_grid_set(grd_shape1_lines,0,3,2);
ds_grid_set(grd_shape1_lines,1,3,3);
//upper body
ds_grid_set(grd_shape1_lines,0,4,4);
ds_grid_set(grd_shape1_lines,1,4,5);
ds_grid_set(grd_shape1_lines,0,5,4);
ds_grid_set(grd_shape1_lines,1,5,6);
ds_grid_set(grd_shape1_lines,0,6,5);
ds_grid_set(grd_shape1_lines,1,6,8);

//belt
ds_grid_set(grd_shape1_lines,0,9,6);
ds_grid_set(grd_shape1_lines,1,9,7);
ds_grid_set(grd_shape1_lines,0,10,7);
ds_grid_set(grd_shape1_lines,1,10,8);
//left arm
ds_grid_set(grd_shape1_lines,0,8,4);
ds_grid_set(grd_shape1_lines,1,8,11);
ds_grid_set(grd_shape1_lines,0,11,11);
ds_grid_set(grd_shape1_lines,1,11,12);
//skirt thing
ds_grid_set(grd_shape1_lines,0,12,6);
ds_grid_set(grd_shape1_lines,1,12,9);
ds_grid_set(grd_shape1_lines,0,13,8);
ds_grid_set(grd_shape1_lines,1,13,10);
ds_grid_set(grd_shape1_lines,0,14,9);
ds_grid_set(grd_shape1_lines,1,14,10);
//right arm+sword
ds_grid_set(grd_shape1_lines,0,15,5);
ds_grid_set(grd_shape1_lines,1,15,13);
ds_grid_set(grd_shape1_lines,0,16,13);
ds_grid_set(grd_shape1_lines,1,16,15);
ds_grid_set(grd_shape1_lines,0,17,14);
ds_grid_set(grd_shape1_lines,1,17,15);
ds_grid_set(grd_shape1_lines,0,18,15);
ds_grid_set(grd_shape1_lines,1,18,16);
//sword handles
ds_grid_set(grd_shape1_lines,0,19,14);
ds_grid_set(grd_shape1_lines,1,19,17);
ds_grid_set(grd_shape1_lines,0,20,14);
ds_grid_set(grd_shape1_lines,1,20,18);


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init movement + collision stuff
hsp = 0;
vsp = 0;

hsp_acceleration = 2;
max_hsp = 32;

fric = 1;

jumpspeed = 45;
terminal_velocity = 50;

knockback = 28;
dir = 1;

moving = false;

width = 18 * X_STEP;
height = 19 * Y_STEP;

base = y + height;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>711</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_life</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>5</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>701</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_score</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create sword

//sword = instance_create(x + width / 2, y, obj_sword);
//sword.owner = id;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(keyboard_check_pressed(ord('S'))){
  switchnext=true;
  /*if ((curr_state==state.ORION_STATE1 ||curr_state==state.ORION_STATE1to2 
      || curr_state==state.ORION_STATE2to1||curr_state==state.ORION_STATE2
      ||curr_state==state.ORION_STATE2toATTACK ||curr_state==state.ORION_STATE_ATTACK)){
        
       curr_state=state.AQUILA_STATE1;
     } else if (curr_state==state.AQUILA_STATE1||curr_state==state.AQUILA_STATE1to2
      || curr_state==state.AQUILA_STATE2 || curr_state==state.AQUILA_STATE2to1
      || curr_state==state.AQUILA_STATE_DIVE){
        curr_state=state.TAURUS_STATE1;
     } else if (curr_state==state.TAURUS_STATE1||curr_state==state.TAURUS_STATE2
      ||curr_state==state.TAURUS_STATE1to2||curr_state==state.TAURUS_STATE2to1
      || curr_state==state.TAURUS_CHARGE){
        curr_state=state.ORION_STATE1;
      }*/
}//keyboard check

///Animate
if (moving &amp;&amp; curr_state==state.ORION_STATE1) {
//show_message("in if orion state 1");
  if(switchnext){
    curr_state=state.ORION_TO_AQUILA;
  } else {
    curr_state = state.ORION_STATE1to2;
    prev_state=state.ORION_STATE1;
  }
  switchnext=false;
}
if (curr_state==state.ORION_STATE1 &amp;&amp; switchnext) {
show_message("in state1 and switchnext");
    curr_state=state.ORION_TO_AQUILA;
    switchnext=false;
}

if (moving &amp;&amp; curr_state==state.ORION_STATE2) {
  if(switchnext){
     curr_state=state.ORION_TO_AQUILA;
  } else {
    curr_state = state.ORION_STATE2to1;  
    prev_state=state.ORION_STATE2;
  }
  switchnext=false;
}
if (moving &amp;&amp; curr_state==state.ORION_STATE_ATTACK) {
  if(switchnext){
     curr_state=state.ORION_TO_AQUILA;
     prev_state=state.ORION_STATE1;
  }
  switchnext=false;
}

if(curr_state==state.ORION_TO_AQUILA){
    if (currFrame==animation_frames) {
      if (moving) {
          curr_state=state.ORION_TO_AQUILA;
      } else {
          curr_state=state.ORION_STATE1;
      }
  } else {
    currFrame++;
  }
}

//show_message("current state is " + string(curr_state)+", currFrame is " +string(currFrame));
if(curr_state==state.ORION_STATE1to2){
  if (currFrame==animation_frames) {
    if (moving) {
        curr_state=state.ORION_STATE2to1;
    } else {
        curr_state=state.ORION_STATE2;
    }
  } else {
    currFrame++;
  }
}
if(curr_state==state.ORION_STATE2to1){
  if (currFrame==1) {
    if (moving) {
        curr_state=state.ORION_STATE1to2;
    } else {
        curr_state=state.ORION_STATE1;
    }
  } else {
    currFrame--;
  }
}
if(curr_state==state.ORION_STATE2toATTACK){
  if (currFrame==animation_frames)
    curr_state=state.ORION_STATE_ATTACK;
  else
    currFrame++;
}

//AQUILA
if (moving &amp;&amp; curr_state==state.AQUILA_STATE1) {
    curr_state = state.AQUILA_STATE1to2;
}

if (moving &amp;&amp; curr_state==state.AQUILA_STATE2) {
    curr_state = state.AQUILA_STATE2to1;
}

//show_message("current state is " + string(curr_state)+", currFrame is " +string(currFrame));
if(curr_state==state.AQUILA_STATE1to2){
  if (currFrame==animation_frames) {
    if (moving) {
        curr_state=state.AQUILA_STATE2to1;
    } else {
        curr_state=state.AQUILA_STATE2;
    }
  } else {
    currFrame++;
  }
}
if(curr_state==state.AQUILA_STATE2to1){
  if (currFrame==1) {
    if (moving) {
        curr_state=state.AQUILA_STATE1to2;
    } else {
        curr_state=state.AQUILA_STATE1;
    }
  } else {
    currFrame--;
  }
}
//TAURUS
if (moving &amp;&amp; curr_state==state.TAURUS_STATE1) {
    curr_state = state.TAURUS_STATE1to2;
}

if (moving &amp;&amp; curr_state==state.TAURUS_STATE2) {
    curr_state = state.TAURUS_STATE2to1;
}

//show_message("current state is " + string(curr_state)+", currFrame is " +string(currFrame));
if(curr_state==state.TAURUS_STATE1to2){
  if (currFrame==animation_frames) {
    if (moving) {
        curr_state=state.TAURUS_STATE2to1;
    } else {
        curr_state=state.TAURUS_STATE2;
    }
  } else {
    currFrame++;
  }
}
if(curr_state==state.TAURUS_STATE2to1){
  if (currFrame==1) {
    if (moving) {
        curr_state=state.TAURUS_STATE1to2;
    } else {
        curr_state=state.TAURUS_STATE1;
    }
  } else {
    currFrame--;
  }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement

// let the player jump if touching a wall
on_ground = place_meeting(x,y+1,obj_wall);

//Get the player's input
key_right = keyboard_check(vk_right);
key_left = -keyboard_check(vk_left);
key_jump = keyboard_check_pressed(vk_space);

//React to inputs
move = key_left + key_right;
hsp += move * hsp_acceleration;

if (abs(hsp) &gt; max_hsp) {
    hsp = max_hsp * sign(hsp);
}

if (move == 1) {
    moving = true;
    dir = 1;
} else if (move == -1) {
    moving = true;
    // if direction has changed, move the character
    //if (dir == 1) {
    //    x -= width;
    //}
    dir = -1;
} else {
    moving = false;
    
    //slow down character
    if (on_ground) {
        var change = fric * sign(hsp);
        if (sign(hsp) == sign(hsp - change)) {
           hsp -= change;
        } else {
            hsp = 0;
        }
    }
    
}


//gravity
if (vsp &lt; terminal_velocity) {
    vsp += GRAV;
} 

// let the player jump if touching a wall
if (on_ground) {
    vsp = key_jump * -jumpspeed;
}


horizontal_move_with_collision(obj_wall);
vertical_move_with_collision(obj_wall);

//set base for collision purposes
base = y + height;



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="6">
      <action>
        <libid>1</libid>
        <id>331</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_restart_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switchnext=false;
new_grd=ds_grid_create(2,ORION_NO_STARS);
curr_grd=new_grd;
curr_lines=grd_shape1_lines;
no_lines=ORION_NO_LINES;
no_stars=ORION_NO_STARS;
//show_message("current state is " + string(curr_state));
if(curr_state==state.ORION_STATE1)
  curr_grd=grd_shape1;
if(curr_state==state.ORION_STATE2)
  curr_grd=grd_shape1_state2;
if(curr_state==state.AQUILA_STATE1){
  curr_grd=grd_aqu_s1;
}
if(curr_state==state.TAURUS_STATE1){
  curr_grd=grd_tau_s1;
}
if(curr_state==state.AQUILA_STATE2){
  curr_grd=grd_aqu_s2;
}
if(curr_state==state.TAURUS_STATE2){
  curr_grd=grd_tau_s2;
}
if(curr_state==state.ORION_STATE_ATTACK){
  curr_grd=grd_shape1_state3;
}
if(curr_state==state.ORION_STATE1to2){
  if(currFrame&lt;=animation_frames){
    for(i=0;i&lt;ORION_NO_STARS;i++){
      xOrig=ds_grid_get(grd_shape1,0,i);
      yOrig=ds_grid_get(grd_shape1,1,i);
      xNew=ds_grid_get(grd_shape1_state2,0,i);
      yNew=ds_grid_get(grd_shape1_state2,1,i);
      xDiff=(xNew-xOrig)*(currFrame/animation_frames);
      yDiff=(yNew-yOrig)*(currFrame/animation_frames);
      ds_grid_set(new_grd,0,i,xOrig+xDiff);
      ds_grid_set(new_grd,1,i,yOrig+yDiff);
    }
    curr_grd=new_grd;
  } else {
    //curr_state=state.ORION_STATE2;
  }
}
if(curr_state==state.ORION_STATE2to1){
  if(currFrame&gt;0){
    for(i=0;i&lt;ORION_NO_STARS;i++){
      xOrig=ds_grid_get(grd_shape1_state2,0,i);
      yOrig=ds_grid_get(grd_shape1_state2,1,i);
      xNew=ds_grid_get(grd_shape1,0,i);
      yNew=ds_grid_get(grd_shape1,1,i);
      xDiff=(xNew-xOrig)*((animation_frames-currFrame)/animation_frames);
      yDiff=(yNew-yOrig)*((animation_frames-currFrame)/animation_frames);
      ds_grid_set(new_grd,0,i,xOrig+xDiff);
      ds_grid_set(new_grd,1,i,yOrig+yDiff);
    }
    curr_grd=new_grd;
  } else {
    //curr_state=state.ORION_STATE1;
  }
}
if(curr_state==state.ORION_STATE2toATTACK){
  if(currFrame&lt;=animation_frames){
    for(i=0;i&lt;ORION_NO_STARS;i++){
      xOrig=ds_grid_get(grd_shape1,0,i);
      yOrig=ds_grid_get(grd_shape1,1,i);
      xNew=ds_grid_get(grd_shape1_state3,0,i);
      yNew=ds_grid_get(grd_shape1_state3,1,i);
      xDiff=(xNew-xOrig)*(currFrame/animation_frames);
      yDiff=(yNew-yOrig)*(currFrame/animation_frames);
      ds_grid_set(new_grd,0,i,xOrig+xDiff);
      ds_grid_set(new_grd,1,i,yOrig+yDiff);
    }
    curr_grd=new_grd;
  } else {
    //curr_state=state.ORION_STATE1;
  }
}
if(curr_state==state.ORION_STATE_ATTACK){
  curr_grd=grd_shape1_state3;
}
//show_message("curr_state:" + string(curr_state) +"1to2:"+string(state.AQUILA_STATE1to2));
//then Aquila code
if(curr_state==state.AQUILA_STATE1to2){
  //show_message("in if statement");
  curr_grd=grd_aqu_s1;
  curr_lines=grd_aqu_lines;
  no_lines=AQUILA_NO_LINES;
  no_stars=AQUILA_NO_STARS;
  
  if(currFrame&lt;=animation_frames){
    for(i=0;i&lt;AQUILA_NO_STARS;i++){
      xOrig=ds_grid_get(grd_aqu_s1,0,i);
      yOrig=ds_grid_get(grd_aqu_s1,1,i);
      xNew=ds_grid_get(grd_aqu_s2,0,i);
      yNew=ds_grid_get(grd_aqu_s2,1,i);
      xDiff=(xNew-xOrig)*(currFrame/animation_frames);
      yDiff=(yNew-yOrig)*(currFrame/animation_frames);
      ds_grid_set(new_grd,0,i,xOrig+xDiff);
      ds_grid_set(new_grd,1,i,yOrig+yDiff);
    }
    curr_grd=new_grd;
  } else {
    //curr_state=state.ORION_STATE1;
  }
}
if(curr_state==state.AQUILA_STATE2to1){
 // show_message("in if statement");
  curr_grd=grd_aqu_s2;
  curr_lines=grd_aqu_lines;
  no_lines=AQUILA_NO_LINES;
  no_stars=AQUILA_NO_STARS;
  
  if(currFrame&lt;=animation_frames){
    for(i=0;i&lt;AQUILA_NO_STARS;i++){
      xOrig=ds_grid_get(grd_aqu_s2,0,i);
      yOrig=ds_grid_get(grd_aqu_s2,1,i);
      xNew=ds_grid_get(grd_aqu_s1,0,i);
      yNew=ds_grid_get(grd_aqu_s1,1,i);
      xDiff=(xNew-xOrig)*((animation_frames-currFrame)/animation_frames);
      yDiff=(yNew-yOrig)*((animation_frames-currFrame)/animation_frames);
      ds_grid_set(new_grd,0,i,xOrig+xDiff);
      ds_grid_set(new_grd,1,i,yOrig+yDiff);
    }
    curr_grd=new_grd;
  } else {
    //curr_state=state.ORION_STATE1;
  }
}

if(curr_state==state.TAURUS_STATE1){
  curr_grd=grd_tau_s2;
  curr_lines=grd_tau_lines;
  no_lines=TAURUS_NO_LINES;
  no_stars=TAURUS_NO_STARS;
}
if(curr_state==state.TAURUS_STATE1to2){
  //show_message("in if statement");
  new_grd=ds_grid_create(2,TAURUS_NO_STARS);
  curr_grd=grd_tau_s1;
  curr_lines=grd_tau_lines;
  no_lines=TAURUS_NO_LINES;
  no_stars=TAURUS_NO_STARS;
  
  if(currFrame&lt;=animation_frames){
    for(i=0;i&lt;TAURUS_NO_STARS;i++){
      xOrig=ds_grid_get(grd_tau_s1,0,i);
      yOrig=ds_grid_get(grd_tau_s1,1,i);
      xNew=ds_grid_get(grd_tau_s2,0,i);
      yNew=ds_grid_get(grd_tau_s2,1,i);
      xDiff=(xNew-xOrig)*(currFrame/animation_frames);
      yDiff=(yNew-yOrig)*(currFrame/animation_frames);
      ds_grid_set(new_grd,0,i,xOrig+xDiff);
      ds_grid_set(new_grd,1,i,yOrig+yDiff);
    }
    curr_grd=new_grd;
  } else {
    //curr_state=state.ORION_STATE1;
  }
}

if(curr_state==state.TAURUS_STATE2to1){
 // show_message("in if statement");
  new_grd=ds_grid_create(2,TAURUS_NO_STARS);
  curr_grd=grd_tau_s2;
  curr_lines=grd_tau_lines;
  no_lines=TAURUS_NO_LINES;
  no_stars=TAURUS_NO_STARS;
  
  if(currFrame&lt;=animation_frames){
    for(i=0;i&lt;TAURUS_NO_STARS;i++){
      xOrig=ds_grid_get(grd_tau_s2,0,i);
      yOrig=ds_grid_get(grd_tau_s2,1,i);
      xNew=ds_grid_get(grd_tau_s1,0,i);
      yNew=ds_grid_get(grd_tau_s1,1,i);
      xDiff=(xNew-xOrig)*((animation_frames-currFrame)/animation_frames);
      yDiff=(yNew-yOrig)*((animation_frames-currFrame)/animation_frames);
      ds_grid_set(new_grd,0,i,xOrig+xDiff);
      ds_grid_set(new_grd,1,i,yOrig+yDiff);
    }
    curr_grd=new_grd;
  } else {
    //curr_state=state.ORION_STATE1;
  }
}
if(curr_state==state.ORION_TO_AQUILA){
  show_message("in Orion to Aquila");
  if (prev_state==state.ORION_STATE1)
    curr_grd=grd_shape1;
  else if (prev_state==state.ORION_STATE1)
    curr_grd=grd_shape1_state2;
  else if (prev_state==state.ORION_STATE_ATTACK)
    curr_grd=grd_shape1_state3;
  //curr_grd=grd_shape1_state1;
  curr_lines=grd_aqu_lines;
  no_lines=AQUILA_NO_LINES;
  no_stars=AQUILA_NO_STARS;
  
  X_MID=200;
  Y_MID=200;
  if(currFrame&lt;=(animation_frames/2)){
    for(i=0;i&lt;AQUILA_NO_STARS;i++){
    if(animation_frames==0){
      xOrig=ds_grid_get(curr_grd,0,i);
      yOrig=ds_grid_get(curr_grd,1,i);
    } else {
      xOrig=ds_grid_get(new_grd,0,i);
      yOrig=ds_grid_get(new_grd,1,i);    
    }
      if(xOrig&lt;X_MID-40)
        xOrig+=40;
      if(xOrig&gt;X_MID+40)
        xOrig-=40;
      if(yOrig&lt;Y_MID-40)
        yOrig+=40;
      if(yOrig&gt;Y_MID+40)
        yOrig-=40;
    }
    show_message("xOrig:"+string(xOrig)+"yOrig:"+string(yOrig));
    curr_grd=new_grd;
    ds_grid_set(new_grd,0,i,xOrig);
    ds_grid_set(new_grd,1,i,yOrig);
  } else {
    //curr_state=state.ORION_STATE1;
  }
}

if (dir == -1) {
    offset = width;
} else {
    offset = 0;
}

//plot lines
for (i=0;i&lt;no_lines;i++){
  point1=ds_grid_get(curr_lines,0,i);
  point2=ds_grid_get(curr_lines,1,i);
  x1=(ds_grid_get(curr_grd,0,point1) * X_STEP * dir) + offset;
  y1=ds_grid_get(curr_grd,1,point1) * Y_STEP;
  x2=(ds_grid_get(curr_grd,0,point2) * X_STEP * dir) + offset;
  y2=ds_grid_get(curr_grd,1,point2) * Y_STEP;
  draw_set_colour(c_white);
  draw_line_width(x1+x,y1+y,x2+x,y2+y,4);
}

//plot stars
for (i=0;i&lt;no_stars;i++){
  draw_set_color(c_white);
  deltax=(ds_grid_get(curr_grd,0,i) * X_STEP* dir) + offset;
  deltay=ds_grid_get(curr_grd,1,i) * Y_STEP;
  draw_circle(deltax+x,deltay+y,8,false);
  //instance_create(x,y,obj_star);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>714</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_draw_life_images</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>-1</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>-64</string>
          </argument>
          <argument>
            <kind>5</kind>
            <sprite>star</sprite>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>703</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_draw_score</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>-1</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>-32</string>
          </argument>
          <argument>
            <kind>1</kind>
            <string>GLORY:</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
